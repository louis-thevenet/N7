(* This file is generated by Why3's Coq driver *)
(* Beware! Only edit allowed sections below    *)
Require Import BuiltIn.
Require BuiltIn.
Require int.Int.

(* Why3 assumption *)
Inductive ref (a:Type) :=
  | ref'mk : a -> ref a.
Axiom ref_WhyType : forall (a:Type) {a_WT:WhyType a}, WhyType (ref a).
Existing Instance ref_WhyType.
Arguments ref'mk {a}.

(* Why3 assumption *)
Definition contents {a:Type} {a_WT:WhyType a} (v:ref a) : a :=
  match v with
  | ref'mk x => x
  end.

Parameter n: Numbers.BinNums.Z.

Axiom Requires : (0%Z <= n)%Z.

Parameter r: Numbers.BinNums.Z.

Parameter x: Numbers.BinNums.Z.

Axiom LoopInvariant : ((r + (x * x)%Z)%Z = (n * n)%Z).

Parameter infix_eq'result'unused: Init.Datatypes.bool.

Axiom infix_eq'result'unused'def :
  ((x = 0%Z) -> (infix_eq'result'unused = Init.Datatypes.true)) /\
  (~ (x = 0%Z) -> (infix_eq'result'unused = Init.Datatypes.false)).

Axiom H : ~ (x = 0%Z).

Parameter r1: Numbers.BinNums.Z.

Axiom Ensures : (r1 = ((r + (2%Z * x)%Z)%Z - 1%Z)%Z).

Parameter x1: Numbers.BinNums.Z.

Axiom Ensures1 : (x1 = (x - 1%Z)%Z).

(* Why3 goal *)
Theorem carre'vc : (0%Z <= x)%Z /\ (x1 < x)%Z.
Proof.


Qed.

