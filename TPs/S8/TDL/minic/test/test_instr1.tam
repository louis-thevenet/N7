;Declaration of a
;End of Block
PUSH 1
LOADL 5
STORE (1) 0[SB]
;Declaration of b
PUSH 1
LOADL 10
STORE (1) 1[SB]
;Declaration of somme
PUSH 1
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@3ada9e37
;Access to a
LOAD (1) 0[SB]
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@5cbc508c
;Access to b
LOAD (1) 1[SB]
SUBR IAdd
STORE (1) 2[SB]
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@567d299b
;Access to somme
LOAD (1) 2[SB]
SUBR IOut
;Declaration of compteur
PUSH 1
LOADL 0
STORE (1) 3[SB]
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@6c629d6e
;Access to somme
LOAD (1) 2[SB]
LOADL 10
SUBR IGtr
JUMPIF (0) else_1
;End of Block
LOADL 1
;Store a in register SB with offset 0
STORE (1) 0[SB]
LOADL 0
;Store b in register SB with offset 1
STORE (1) 1[SB]
JUMP end_if_1
;End of Block
else_1
LOADL 0
;Store a in register SB with offset 0
STORE (1) 0[SB]
LOADL 1
;Store b in register SB with offset 1
STORE (1) 1[SB]
end_if_1
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@60215eee
;Access to a
LOAD (1) 0[SB]
SUBR IOut
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@4ca8195f
;Access to somme
LOAD (1) 2[SB]
LOADL 10
SUBR ILeq
JUMPIF (0) else_2
;End of Block
LOADL 1
;Store a in register SB with offset 0
STORE (1) 0[SB]
LOADL 0
;Store b in register SB with offset 1
STORE (1) 1[SB]
JUMP end_if_2
;End of Block
else_2
LOADL 0
;Store a in register SB with offset 0
STORE (1) 0[SB]
LOADL 1
;Store b in register SB with offset 1
STORE (1) 1[SB]
end_if_2
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@65e579dc
;Access to a
LOAD (1) 0[SB]
SUBR IOut
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@61baa894
;Access to compteur
;While
while_condition_3
LOAD (1) 3[SB]
LOADL 3
SUBR ILss
JUMPIF (0) while_end_3
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@b065c63
;Access to compteur
;End of Block
while_body_3
LOAD (1) 3[SB]
LOADL 1
SUBR IAdd
;Store compteur in register SB with offset 3
STORE (1) 3[SB]
JUMP while_condition_3
while_end_3
;Variable Access fr.n7.stl.minic.ast.expression.accessible.VariableAccess@768debd
;Access to compteur
LOAD (1) 3[SB]
SUBR IOut
POP (0) 4
HALT

